#	SCCS Id: @(#)Make.ini	1.4	87/08/08
# This is a sample `make.ini' file for NDMAKE v3.7.  You will probably want
# to customize it for your system.



# The order to search for rules and files is specified by .SUFFIXES
.SUFFIXES : .exe .obj .c .for .asm

# A few macros.
CFLAGS = -A$(MODEL)
MODEL = S
SETARGV = $(LIB)\$(MODEL)SETARGV
LIBS =
BIN =
LFLAGS =

# A universally useful target.
clean:
	+-erase *.bak
	+-erase *.map

# .BEFORE and .AFTER can be used to turn DPATH off and on.
.BEFORE:; @+echo For help with ndmake, use the command `make -h'
.AFTER:; @+echo All done.


# DEFAULT RULES
# To produce a `.obj' file from a `.asm' file using MASM.
.asm.obj:; masm $*.asm;

# To produce a `.obj' file from a `.c' file using Microsoft C. 
.c.obj:; msc $(CFLAGS) -I\c $*.c

# To produce a `.obj' file from a `.for' file using Microsoft Fortran.
.for.obj:
	for1 $*.for;
	pas2

# To produce a `.exe' file from an `.obj' file.  Note that there is a
# problem because LIBS may be different for linking `.obj' files
# produced by different compilers (C, FORTRAN, PASCAL, etc).  To avoid
# this problem you may want to have the C compiler produce `.cbj' files,
# the FORTRAN compiler produce `.fbj' files, etc.  Then you could write
# specific rules for `.cbj.exe' and `.fbj.exe' which would use the correct
# libraries.
.obj.exe:
	link $*.obj $(SETARGV), $@,, $(LIBS) $(LFLAGS);

# To produce a `.exe' file from a `.asm' file.
.asm.exe:
	masm $*.asm;
	link $*.obj, $@,, $(LIBS)
	erase $*.obj

# To produce a `.exe' file from a `.c' file.
.c.exe:
	msc $(CFLAGS) -I\c $*.c
	link $*.obj $(SETARGV), $@,, $(LIBS) $(LFLAGS)
	erase $*.obj

# To produce a `.exe' file from a `.for' file.
.for.exe:
	for1 $*.for;
	pas2
	link $*.obj, $@,, $(LIB)\FORTRAN.LIB
	erase $*.obj
