#	SCCS Id: @(#)Maketcc.ini	3.0	89/07/07
# Sample Turbo C 2.0 `make.ini' for NDMAKE 4.5.  Customize it for your setup.

# If .NOIG is used, it *must* be the first directive in this file.
#.NOIG

# The order to search for rules and files is specified by .SUFFIXES
.SUFFIXES : .com .exe .obj .c .tpu .pas .asm .y .l

# The directory NDMAKE uses for temporary file
MAKE_TMP = $(TMP)

# Where NDMAKE looks for file without directory specifications
VPATH = .;..

# Macros for compilers and assemblers.
AS	= tasm
CC	= tcc
CFLAGS	= -m$(MODEL)
#LEX	 = lex
#LFLAGS  =
#YACC	 = yacc
#YFLAGS  =

# Other useful macros
BIN	=
ECHO	= >stdout
C	= c:\turbo\c
LIB	= c:\turbo\c\lib
LIBS	= $(LIB)\emu $(LIB)\math$(MODEL) $(LIB)\c$(MODEL)
C0	= $(LIB)\c0$(MODEL).obj
MODEL	= s
# SETARGV	= $(LIB)\$(MODEL)SETARGV
LFLAGS =
TLFLAGS = /c /x

# A universally useful target so "make clean" always works.
clean:
	-(erase *.bak; erase *.map)

#large:
#	(if exist \bin\c3s.exe do goto end; \
#	 rename \bin\c3.exe c3s.exe; \
#	 rename \bin\c3l.exe c3.exe; \
#	 :end)
#small:
#	(if exist \bin\c3s.exe do goto end; \
#	 rename \bin\c3.exe c3l.exe; \
#	 rename \bin\c3s.exe c3.exe; \
#	 :end)

#chkdsk:
#	chkdsk d:

# .BEFORE and .AFTER can be used to turn DPATH off and on.
#.BEFORE:; @+echo For help with ndmake, use the command `make -h'
#.AFTER:; @+echo All done.
.BEFORE:; @\norton\tm start/C2/N
.AFTER:; @\norton\tm stop/C2/L/N

.RESPONSE_LINK: tlink link4
.RESPONSE_LIB:	tlib

# DEFAULT RULES
#
#	ASM -> OBJ using MASM.
.asm.obj:
	${AS} $<;

#	C -> OBJ using Turbo C.
.c.obj:
	${CC} ${CFLAGS} -c $<

#	FOR -> OBJ using Microsoft Fortran.
#.for.obj:
#	for1 $<;
#	pas2

#	Y -> C, for YACC
.y.c:
	$(YACC) $(YFLAGS) $<
	del $@
	rename y.tbc $@
	del $*.h
	rename y.tbh $*.h

#	L -> C, for LEX
#.l.c:
#	$(LEX) $(LFLAGS) $<
#	mv lex.yy.c $@

# To produce a `.exe' file from an `.obj' file.  Note that there is a
# problem because LIBS may be different for linking `.obj' files
# produced by different compilers (C, FORTRAN, PASCAL, etc).  To avoid
# this problem you may want to have the C compiler produce `.cbj' files,
# the FORTRAN compiler produce `.fbj' files, etc.  Then you could write
# specific rules for `.cbj.exe' and `.fbj.exe' which would use the correct
# libraries.

# To produce a `.com' file from a `.c' file with Turbo C.
.c.com:
	${CC} $(CFLAGS) -mt -lt $<
	erase $*.obj

# To produce a `.exe' file from a `.c' file.
.c.exe:
	${CC} $(CFLAGS) $<
#	${CC} $(CFLAGS) -c $<
#	link $*.obj $(SETARGV), $@,, $(LIBS) $(LFLAGS);
	erase $*.obj

# To produce a `.exe' file from a `.asm' file.
.asm.exe:
	${AS} $<;
	link $*.obj, $@,, $(LIBS)
	erase $*.obj

# To produce a `.exe' file from a `.for' file.
#.for.exe:
#	for1 $<;
#	pas2
#	link $*.obj, $@,, $(LIB)\FORTRAN
#	erase $*.obj

# To produce a `.exe' file from a `.pas' file.
.pas.exe:
	tpc $(PFLAGS) $*

# To produce a `.tpu' file from a `.pas' file.
.pas.tpu:
	tpc $(PFLAGS) $*

# C obj -> exe
.obj.exe:
#	link $< $(SETARGV), $@,, $(LIBS) $(LFLAGS);
	tlink $(TLFLAGS) $(C0) $< $(SETARGV), $@,, $(LIBS);

# To produce a `.com' file from a `.exe' file.
.exe.com:
	exe2bin $*.exe $*.com
	erase $*.exe
