#	SCCS Id: @(#)Makefile.ovl	3.0	90/02/08
#	PC NetHack 3.0 Makefile for Microsoft(tm) "C" 5.1 -- Pierre Martineau
#	Overlay Arrangement -- Stephen Spackman, Pierre Martineau, Norm Meluch
#	Multiple Compilation Hack and so forth -- Stephen Spackman
#
#	 Other things that have to be reconfigured are in config.h, pcconf.h,
#	 (for other targets: unixconf.h, tosconf.h), and possibly system.h.
#
#	 Nota Bene: OVERLAY *must* be defined in pcconf.h to use this makefile!
#	 Also: Rename this file to "makefile", some targets rely on it.
# -----------------------------------------------------------------------------
#	 In addition to your C compiler,
#
#	 if you want to change	you will need a
#	 files with suffix	workalike for
#	   .y			  yacc
#	   .l			  lex
#	   .asm 		  masm
#
# *****************************************************************************
# ************************ Compiler Info **************************************
# *****************************************************************************
# Large memory model, register bug, remove stack probes:
CC	= cl /c
LINK	= link
MODEL	= L
ASM	= masm
# $(MAKE) macro is often predefined, so we use $(MAKEBIN) instead.
MAKEBIN = make
# For those of us who have these on PC.
# YACC	 = yacc
# LEX	 = lex
YACC	= bison -y
LEX	= flex
# Standard file names may vary in PC installations.
YTABC	= y_tab.c
YTABH	= y_tab.h
LEXYYC	= lexyy.c
# /Gt22 is currently about the largest value that keeps the initialised data
# segment below 64K (and keeps the linker happy).
# 286 or higher machines can use the /G2 CFLAG option for better performance.
CFLAGS	= /A$(MODEL) /Os /Oa /Gs /Gt22 /Zp1 /W0 /I$(INCL)
#
LFLAGS	= /noi /seg:512 /map /st:4096 /cp:5000
#
AFLAGS	= /MX 
#
# *****************************************************************************
# ********* Directories (makedefs hardcodes these, don't change them) *********
# *****************************************************************************
#
INCL	= ..\include
AUX	= ..\auxil
SRC	= ..\src
OTHERS	= ..\others
OBJ	= $(SRC)\o
#
# *****************************************************************************
# ************************ Local Variables ************************************
# *****************************************************************************
#
# The game name
GAME	 = nethack
#
# The default make target (so just typing 'make' is useful)
DEFAULT  : $(GAME)
#
# The game directory
# make sure GAMEDIR exists!
GAMEDIR  = ..
#
# The game filename
GAMEFILE = $(GAMEDIR)\$(GAME).exe
#
# Target environment prefix
TARG	 = pc
#
# Overlay manager object file.
OVLMGR	 = ovlmgr.obj
#
# Termcap routines.
TERMCAPS = $(SRC)\termlib.lib
#
###############################################################################
# Switch the following lines if you have made changes in ovlmgr.asm
(OBJ)\$(OVLMGR):
#$(OBJ)\$(OVLMGR): ; copy $(OTHERS)\$(OVLMGR) $(OBJ)\$(OVLMGR)
###############################################################################
# If you have yacc and lex programs and make any changes, comment out the
# upper two targets and uncomment the lower two.
#do_yacc: yacc_msg
#do_lex:  lex_msg
do_yacc: yacc_act
do_lex:  lex_act
###############################################################################
# Optional high-quality BSD random number generation routines (see pcconf.h).
# Set to nothing if not used.
RANDOM	 = $(OBJ)\random.o
# RANDOM =
###############################################################################
# Optional C library specifier for those with non-standard libraries or
# a multiple-target library setup.
# CLIB	   = llibcer /nod
CLIB	 =
###############################################################################
# If TERMLIB is NOT #defined in the source, comment out the lower line and
# uncomment the upper. Don't forget to copy the $(TERMCAPS) file to the
# $(SRC) directory if you have uncommented the lower line.
#TERMLIB =
TERMLIB = $(TERMCAPS)
###############################################################################

# nothing below this line should have to be changed

ROOT =	$(OBJ)\$(OVLMGR) $(OBJ)\trampoli.o $(OBJ)\main.o $(OBJ)\msdos.o \
	$(OBJ)\mkroom.0 $(OBJ)\random.o $(OBJ)\rnd.01 $(OBJ)\mkobj.0 \
	$(OBJ)\invent.0 $(OBJ)\decl.o

OVL01 = $(OBJ)\track.0 $(OBJ)\monmove.01 $(OBJ)\cmd.0 $(OBJ)\dbridge.0 \
	$(OBJ)\dog.0 $(OBJ)\engrave.01 $(OBJ)\mon.01 $(OBJ)\priest.0 \
	$(OBJ)\shk.0 $(OBJ)\trap.01 $(OBJ)\mthrowu.0 \
	$(OBJ)\mondata.01 $(OBJ)\mhitu.1 $(OBJ)\monst.o $(OBJ)\objects.o
OVL02 = $(OBJ)\dogmove.0 $(OBJ)\apply.0
OVL03 = $(OBJ)\makemon.0
OVL04 = $(OBJ)\shk.12b
OVL05 = $(OBJ)\hack.0
OVL06 = $(OBJ)\alloc.o
OVL07 = $(OBJ)\attrib.0 $(OBJ)\allmain.1
OVL08 = $(OBJ)\attrib.2b $(OBJ)\exper.o
OVL09 = $(OBJ)\cmd.2b $(OBJ)\getline.2 $(OBJ)\pray.o $(OBJ)\write.o
OVL10 = $(OBJ)\dbridge.12b
OVL11 = $(OBJ)\do_name.0
OVL12 = $(OBJ)\getline.b
OVL13 = $(OBJ)\invent.1
OVL14 = $(OBJ)\makemon.1
OVL15 = $(OBJ)\makemon.2b
OVL16 = $(OBJ)\allmain.0 $(OBJ)\cmd.1 $(OBJ)\do.0 $(OBJ)\pickup.0 \
	$(OBJ)\vault.0 $(OBJ)\wizard.0 $(OBJ)\artifact.0 $(OBJ)\timeout.0 \
	$(OBJ)\attrib.1 $(OBJ)\eat.0 $(OBJ)\engrave.2 $(OBJ)\getline.01 \
	$(OBJ)\mail.0 $(OBJ)\pri.1 $(OBJ)\prisym.1 $(OBJ)\sounds.0 \
	$(OBJ)\track.1 $(OBJ)\hack.1
OVL17 = $(OBJ)\hack.2
OVL18 = $(OBJ)\mcastu.o $(OBJ)\demon.o
OVL19 = $(OBJ)\mhitm.12b
OVL20 = $(OBJ)\mhitm.0 $(OBJ)\mhitu.0 $(OBJ)\weapon.01
OVL21 = $(OBJ)\mkobj.12b
OVL22 = $(OBJ)\mon.2b $(OBJ)\trap.2
OVL23 = $(OBJ)\monmove.2b $(OBJ)\steal.2b
OVL24 = $(OBJ)\mthrowu.1
OVL25 = $(OBJ)\mthrowu.2b
OVL26 = $(OBJ)\objnam.01 $(OBJ)\pager.0 $(OBJ)\polyself.0 $(OBJ)\mondata.2
OVL27 = $(OBJ)\objnam.2b
OVL28 = $(OBJ)\pager.12b
OVL29 = $(OBJ)\pri.0 $(OBJ)\prisym.0 $(OBJ)\termcap.0 $(OBJ)\topl.0
OVL30 = $(OBJ)\pri.b $(OBJ)\topl.12
OVL31 = $(OBJ)\priest.12b
OVL32 = $(OBJ)\worm.o
OVL33 = $(OBJ)\were.0
OVL34 = $(OBJ)\prisym.2
OVL35 = $(OBJ)\prisym.b
OVL36 = $(OBJ)\read.0
OVL37 = $(OBJ)\read.12b $(OBJ)\spell.o
OVL38 = $(OBJ)\rnd.2b $(OBJ)\topl.b
OVL39 = $(OBJ)\search.12b
OVL40 = $(OBJ)\search.0 $(OBJ)\uhitm.0 $(OBJ)\weapon.2b
OVL41 = $(OBJ)\steal.01
OVL42 = $(OBJ)\termcap.1 $(OBJ)\unix.0
OVL43 = $(OBJ)\termcap.2b
OVL44 = $(OBJ)\timeout.12b $(OBJ)\mondata.b
OVL45 = $(OBJ)\potion.0 $(OBJ)\artifact.1
OVL46 = $(OBJ)\were.12b $(OBJ)\wizard.12b
OVL47 = $(OBJ)\polyself.12b
OVL48 = $(OBJ)\pickup.12b
OVL49 = $(OBJ)\lock.o $(OBJ)\trap.b
OVL50 = $(OBJ)\invent.2b
OVL51 = $(OBJ)\hack.b
OVL52 = $(OBJ)\eat.12b $(OBJ)\potion.12b
OVL53 = $(OBJ)\dog.1 $(OBJ)\dogmove.12b
OVL54 = $(OBJ)\dokick.o $(OBJ)\dothrow.o
OVL55 = $(OBJ)\do.12b
OVL56 = $(OBJ)\apply.12b
OVL57 = $(OBJ)\dog.2b $(OBJ)\sounds.12b
OVL58 = $(OBJ)\do_wear.01 $(OBJ)\mhitu.2b
OVL59 = $(OBJ)\sit.o $(OBJ)\artifact.2b $(OBJ)\do_name.12b $(OBJ)\vault.12b \
	$(OBJ)\fountain.o $(OBJ)\music.o $(OBJ)\rumors.o $(OBJ)\shknam.0
OVL60 = $(OBJ)\worn.o $(OBJ)\wield.o $(OBJ)\do_wear.2b
OVL61 = $(OBJ)\zap.o $(OBJ)\pri.2
OVL62 = $(OBJ)\unix.12b $(OBJ)\mail.12b $(OBJ)\tty.o $(OBJ)\version.o \
	$(OBJ)\options.o $(OBJ)\o_init.o $(OBJ)\allmain.2b $(OBJ)\engrave.b \
	$(OBJ)\end.o $(OBJ)\save.o $(OBJ)\restore.o $(OBJ)\u_init.o \
	$(OBJ)\topten.o $(OBJ)\shknam.12b $(OBJ)\rip.o
OVL63 = $(OBJ)\bones.o $(OBJ)\mklev.o $(OBJ)\mkmaze.o $(OBJ)\mkroom.12b \
	$(OBJ)\sp_lev.o $(OBJ)\track.2b $(OBJ)\extralev.o

# *****************************************************************************
# ************************* Make Objects **************************************
# *****************************************************************************

MOBJ = $(OVL01) $(OVL02) $(OVL03) $(OVL04) $(OVL05) $(OVL06) $(OVL07) $(OVL08)\
       $(OVL09) $(OVL10) $(OVL11) $(OVL12) $(OVL13) $(OVL14) $(OVL15) $(OVL16)\
       $(OVL17) $(OVL18) $(OVL19) $(OVL20) $(OVL21) $(OVL22) $(OVL23) $(OVL24)\
       $(OVL25) $(OVL26) $(OVL27) $(OVL28) $(OVL29) $(OVL30) $(OVL31) $(OVL32)\
       $(OVL33) $(OVL34) $(OVL35) $(OVL36) $(OVL37) $(OVL38) $(OVL39) $(OVL40)\
       $(OVL41) $(OVL42) $(OVL43) $(OVL44) $(OVL45) $(OVL46) $(OVL47) $(OVL48)\
       $(OVL49) $(OVL50) $(OVL51) $(OVL52) $(OVL53) $(OVL54) $(OVL55) $(OVL56)\
       $(OVL57) $(OVL58) $(OVL59) $(OVL60) $(OVL61) $(OVL62)

VOBJ =	$(ROOT) $(MOBJ)

HOBJ =	$(VOBJ) $(OVL63)

# object files for makedefs
MAKEOBJS    =	$(OBJ)\makedefs.o $(OBJ)\alloc.o    $(OBJ)\monst.o    \
		$(OBJ)\objects.o  $(OBJ)\panic.o

OVERLAYS = ($(OVL01)) ($(OVL02)) ($(OVL03)) ($(OVL04)) ($(OVL05)) ($(OVL06)) \
	   ($(OVL07)) ($(OVL08)) ($(OVL09)) ($(OVL10)) ($(OVL11)) ($(OVL12)) \
	   ($(OVL13)) ($(OVL14)) ($(OVL15)) ($(OVL16)) ($(OVL17)) ($(OVL18)) \
	   ($(OVL19)) ($(OVL20)) ($(OVL21)) ($(OVL22)) ($(OVL23)) ($(OVL24)) \
	   ($(OVL25)) ($(OVL26)) ($(OVL27)) ($(OVL28)) ($(OVL29)) ($(OVL30)) \
	   ($(OVL31)) ($(OVL32)) ($(OVL33)) ($(OVL34)) ($(OVL35)) ($(OVL36)) \
	   ($(OVL37)) ($(OVL38)) ($(OVL39)) ($(OVL40)) ($(OVL41)) ($(OVL42)) \
	   ($(OVL43)) ($(OVL44)) ($(OVL45)) ($(OVL46)) ($(OVL47)) ($(OVL48)) \
	   ($(OVL49)) ($(OVL50)) ($(OVL51)) ($(OVL52)) ($(OVL53)) ($(OVL54)) \
	   ($(OVL55)) ($(OVL56)) ($(OVL57)) ($(OVL58)) ($(OVL59)) ($(OVL60)) \
	   ($(OVL61)) ($(OVL62)) ($(OVL63))

# object files for special levels compiler
SPLEVOBJS   =	$(OBJ)\lev_comp.o $(OBJ)\lev_lex.o  $(OBJ)\lev_main.o \
		$(OBJ)\alloc.o	  $(OBJ)\monst.o    $(OBJ)\objects.o  \
		$(OBJ)\panic.o

# *****************************************************************************
# ************************** Header Objects ***********************************
# *****************************************************************************

TRAP_H	   = $(INCL)\trap.h
PERMONST_H = $(INCL)\permonst.h    $(INCL)\monflag.h
PCCONF_H   = $(INCL)\$(TARG)conf.h $(INCL)\extern.h   $(INCL)\msdos.h \
	     $(INCL)\system.h
GLOBAL_H   = $(PCCONF_H)	   $(INCL)\coord.h    $(INCL)\global.h
CONFIG_H   = $(GLOBAL_H)	   $(INCL)\config.h   $(INCL)\tradstdc.h
YOU_H	   = $(PERMONST_H)	   $(INCL)\attrib.h   $(INCL)\mondata.h \
	     $(INCL)\monst.h	   $(INCL)\you.h      $(INCL)\youprop.h
DECL_H	   = $(YOU_H)		   $(INCL)\decl.h     $(INCL)\obj.h \
	     $(INCL)\onames.h	   $(INCL)\pm.h       $(INCL)\spell.h
HACK_H	   = $(CONFIG_H)	   $(DECL_H)	      $(TRAP_H) \
	     $(INCL)\flag.h	   $(INCL)\gold.h     $(INCL)\mkroom.h \
	     $(INCL)\monsym.h	   $(INCL)\objclass.h $(INCL)\rm.h \
	     $(INCL)\trampoli.h

# *****************************************************************************
# ************************ File Dependencies **********************************
# *****************************************************************************

# Due to an NDMake inadequacy these must accord with a topological sort of the
# generated-from relation... output on the left, input on the right. Trust me.
.SUFFIXES: .exe .0 .01 .012 .1 .12 .12b .2 .2b .b .o .c .y .l .obj .asm

.c.o:
	$(CC) $(CFLAGS) /Fo$(OBJ)\$*.o $*.c
.c.0:
	$(CC) $(CFLAGS) /DOVL0 /NT$*.0 /Fo$(OBJ)\$*.0 $*.c
.c.01:
	$(CC) $(CFLAGS) /DOVL0 /DOVL1 /NT$*.01 /Fo$(OBJ)\$*.01 $*.c
.c.012:
	$(CC) $(CFLAGS) /DOVL0 /DOVL1 /DOVL2 /NT$*.012 /Fo$(OBJ)\$*.012 $*.c
.c.1:
	$(CC) $(CFLAGS) /DOVL1 /NT$*.1 /Fo$(OBJ)\$*.1 $*.c
.c.12:
	$(CC) $(CFLAGS) /DOVL1 /DOVL2 /NT$*.12 /Fo$(OBJ)\$*.12 $*.c
.c.12b:
	$(CC) $(CFLAGS) /DOVL1 /DOVL2 /DOVLB /NT$*.12b /Fo$(OBJ)\$*.12b $*.c
.c.2:
	$(CC) $(CFLAGS) /DOVL2 /NT$*.2 /Fo$(OBJ)\$*.2 $*.c
.c.2b:
	$(CC) $(CFLAGS) /DOVL2 /DOVLB /NT$*.2b /Fo$(OBJ)\$*.2b $*.c
.c.b:
	$(CC) $(CFLAGS) /DOVLB /NT$*.b /Fo$(OBJ)\$*.b $*.c
.asm.obj:
	$(ASM) $(AFLAGS) $*.asm,$(OBJ)\$*.obj ;

$(GAME): $(GAMEFILE)

$(GAME).exe: $(GAMEFILE)

$(GAMEFILE): $(OBJ) $(HOBJ)
	@echo Loading....
	$(LINK) $(ROOT) $(OVERLAYS),$(GAMEFILE),$(GAME),$(CLIB) $(TERMLIB) $(LFLAGS) ;
	@echo Nethack is up to date.

$(OBJ):
	if not exist .\$(OBJ)\*.* mkdir $(OBJ)

#	The following 3 modules vary depending on what OS you are using.

$(OBJ)\main.o:	$(HACK_H) $(TARG)main.c
	$(CC) $(CFLAGS)  /Fo.\$(OBJ)\main.o $(TARG)main.c

$(OBJ)\tty.o:	$(HACK_H) $(INCL)\func_tab.h $(TARG)tty.c
	$(CC) $(CFLAGS)  /Fo.\$(OBJ)\tty.o  $(TARG)tty.c

$(OBJ)\unix.0:	$(HACK_H) $(TARG)unix.c
	$(CC) $(CFLAGS)  /DOVL0 /Fo.\$(OBJ)\unix.0 $(TARG)unix.c
$(OBJ)\unix.12b:	$(HACK_H) $(TARG)unix.c
	$(CC) $(CFLAGS)  /DOVL1 /DOVL2 /DOVLB /Fo.\$(OBJ)\unix.12b $(TARG)unix.c

$(OBJ)\makedefs.o:	$(INCL)\config.h $(INCL)\permonst.h $(INCL)\objclass.h

makedefs.exe:	$(MAKEOBJS)
	$(LINK) $(LFLAGS) $(MAKEOBJS), makedefs.exe,, $(CLIB);

#	Targets for the special levels compiler

lev_comp.c: lev_comp.y
	$(MAKEBIN) do_yacc

lev_lex.c:  lev_comp.l
	$(MAKEBIN) do_lex

yacc_msg:
	@echo lev_comp.y has changed. To update lev_comp.c and lev_comp.h run YACC.

yacc_act:
	$(YACC) -d lev_comp.y
	copy $(YTABC) lev_comp.c
	copy $(YTABH) $(INCL)\lev_comp.h
	del $(YTABC)
	del $(YTABH)

lex_msg:
	@echo lev_comp.l has changed. To update lev_lex.c run LEX.

lex_act:
	$(LEX) lev_comp.l
	copy $(LEXYYC) lev_lex.c
	del $(LEXYYC)

#	This is stupid but since the default rule does not work here ...

$(OBJ)\lev_comp.o:	$(HACK_H)   $(INCL)\sp_lev.h	lev_comp.c
	$(CC) $(CFLAGS) /Fo$(OBJ)\$*.o $*.c
$(OBJ)\lev_lex.o:	$(HACK_H)   $(INCL)\sp_lev.h	$(INCL)\lev_comp.h \
			lev_lex.c
	$(CC) $(CFLAGS) /Fo$(OBJ)\$*.o $*.c

lev_comp.exe:	$(SPLEVOBJS)
	$(LINK) $(LFLAGS) $(SPLEVOBJS),lev_comp.exe,, $(CLIB);

# *****************************************************************************
# *************************  Makedefs Stuff ***********************************
# *****************************************************************************
#	The following include files depend on makedefs to be created.
#	date.h should be remade any time any of the source or include code
#	is modified.

$(INCL)\date.h: $(VOBJ) makedefs.exe
	.\makedefs -v

$(INCL)\trap.h: 	makedefs.exe
	.\makedefs -t

$(INCL)\onames.h:	makedefs.exe
	.\makedefs -o

$(INCL)\pm.h:		makedefs.exe
	.\makedefs -p

data:	$(AUX)\data.bas makedefs.exe
	.\makedefs -d

rumors: $(AUX)\rumors.tru $(AUX)\rumors.fal makedefs.exe
	.\makedefs -r

# *****************************************************************************
# ************************ Secondary targets **********************************
# *****************************************************************************

all:	install

install:	$(OBJ) lev_comp.exe $(GAMEFILE) auxil.tag install.tag
	@echo Don't forget to check HACKDIR in nethack.cnf.
	@echo Done.


#	Watch Out!  This make cleans out the game & bones dirs!
#	This will delete any config file you have and overwrite it
#	with the default.
#	Since the game options may have changed since your last install,
#	you should say yes to clean the directory.

install.tag:
	copy $(OTHERS)\termcap		$(GAMEDIR)
	copy $(AUX)\*.			$(GAMEDIR)
	copy $(OTHERS)\nethack.cnf	$(GAMEDIR)
	echo install done > install.tag

spec_lev.tag: lev_comp.exe $(AUX)\castle.des $(AUX)\endgame.des $(AUX)\tower.des
	lev_comp $(AUX)\castle.des
	lev_comp $(AUX)\endgame.des
	lev_comp $(AUX)\tower.des
	copy castle $(GAMEDIR)
	copy endgame $(GAMEDIR)
	copy tower? $(GAMEDIR)
	del castle
	del endgame
	del tower?
	echo spec_lev done > spec_lev.tag

auxil.tag:	spec_lev.tag	data	rumors
	echo special levels created > auxil.tag

clean:
	del $(OBJ)\*.o
	del $(OBJ)\*.0
	del $(OBJ)\*.01
	del $(OBJ)\*.012
	del $(OBJ)\*.1
	del $(OBJ)\*.12
	del $(OBJ)\*.12b
	del $(OBJ)\*.2
	del $(OBJ)\*.2b
	del $(OBJ)\*.b
	del $(OBJ)\*.obj
	rmdir $(OBJ)

spotless: clean
	del $(INCL)\date.h
	del $(INCL)\onames.h
	del $(INCL)\pm.h
	if exist makedefs.exe del makedefs.exe
	if exist lev_comp.exe del lev_comp.exe
	del castle
	del endgame
	del tower?
	del *.bak
	del *.tag
	del *.map
	del *.txt
	del $(AUX)\data
	del $(AUX)\rumors

# *****************************************************************************
# ************************* Other dependencies ********************************
# *****************************************************************************
# Other dependencies
#
# I deleted that line.	;-}

$(OBJ)\allmain.o:	$(HACK_H)
$(OBJ)\alloc.o: 	$(CONFIG_H)
$(OBJ)\apply.o: 	$(HACK_H)   $(INCL)\edog.h
$(OBJ)\artifact.o:	$(HACK_H)   $(INCL)\artifact.h
$(OBJ)\attrib.o:	$(HACK_H)
$(OBJ)\bones.o: 	$(HACK_H)
$(OBJ)\cmd.o:		$(HACK_H)   $(INCL)\func_tab.h
$(OBJ)\dbridge.o:	$(HACK_H)
$(OBJ)\decl.o:		$(HACK_H)
$(OBJ)\demon.o: 	$(HACK_H)
$(OBJ)\do.o:		$(HACK_H)
$(OBJ)\do_name.o:	$(HACK_H)
$(OBJ)\do_wear.o:	$(HACK_H)
$(OBJ)\dog.o:		$(HACK_H)   $(INCL)\edog.h
$(OBJ)\dogmove.o:	$(HACK_H)   $(INCL)\mfndpos.h	 $(INCL)\edog.h
$(OBJ)\dokick.o:	$(HACK_H)
$(OBJ)\dothrow.o:	$(HACK_H)
$(OBJ)\eat.o:		$(HACK_H)
$(OBJ)\end.o:		$(HACK_H)   $(INCL)\eshk.h
$(OBJ)\engrave.o:	$(HACK_H)
$(OBJ)\exper.o: 	$(HACK_H)
$(OBJ)\extralev.o:	$(HACK_H)
$(OBJ)\fountain.o:	$(HACK_H)
$(OBJ)\getline.o:	$(HACK_H)   $(INCL)\func_tab.h
$(OBJ)\hack.o:		$(HACK_H)
$(OBJ)\invent.o:	$(HACK_H)   $(INCL)\lev.h	 $(INCL)\wseg.h
$(OBJ)\ioctl.o: 	$(HACK_H)
$(OBJ)\lev_main.o:	$(HACK_H)   $(INCL)\sp_lev.h
$(OBJ)\lock.o:		$(HACK_H)
$(OBJ)\makemon.o:	$(HACK_H)
$(OBJ)\mail.o:		$(HACK_H)
$(OBJ)\mcastu.o:	$(HACK_H)
$(OBJ)\mhitm.o: 	$(HACK_H)   $(INCL)\artifact.h
$(OBJ)\mhitu.o: 	$(HACK_H)   $(INCL)\artifact.h	 $(INCL)\edog.h
$(OBJ)\mklev.o: 	$(HACK_H)
$(OBJ)\mkmaze.o:	$(HACK_H)
$(OBJ)\mkobj.o: 	$(HACK_H)
$(OBJ)\mkroom.o:	$(HACK_H)
$(OBJ)\mon.o:		$(HACK_H)   $(INCL)\mfndpos.h	 $(INCL)\artifact.h
$(OBJ)\mondata.o:	$(HACK_H)   $(INCL)\eshk.h	 $(INCL)\epri.h
$(OBJ)\monmove.o:	$(HACK_H)   $(INCL)\mfndpos.h	 $(INCL)\artifact.h
$(OBJ)\monst.o: 	$(CONFIG_H) $(PERMONST_H)	 $(INCL)\eshk.h     \
			$(INCL)\epri.h $(INCL)\vault.h
$(OBJ)\msdos.o: 	$(HACK_H)
$(OBJ)\mthrowu.o:	$(HACK_H)
$(OBJ)\music.o: 	$(HACK_H)
$(OBJ)\o_init.o:	$(HACK_H)   $(INCL)\onames.h
$(OBJ)\objects.o:	$(CONFIG_H) $(INCL)\obj.h	 $(INCL)\objclass.h \
			$(INCL)\prop.h
$(OBJ)\objnam.o:	$(HACK_H)
$(OBJ)\options.o:	$(HACK_H)
$(OBJ)\pager.o: 	$(HACK_H)
$(OBJ)\panic.o: 	$(CONFIG_H)
$(OBJ)\pickup.o:	$(HACK_H)
$(OBJ)\polyself.o:	$(HACK_H)
$(OBJ)\potion.o:	$(HACK_H)
$(OBJ)\pray.o:		$(HACK_H)
$(OBJ)\pri.o:		$(HACK_H)
$(OBJ)\priest.o:	$(HACK_H)   $(INCL)\mfndpos.h	 $(INCL)\eshk.h \
			$(INCL)\epri.h
$(OBJ)\prisym.o:	$(HACK_H)   $(INCL)\lev.h	 $(INCL)\wseg.h
$(OBJ)\random.o:
$(OBJ)\read.o:		$(HACK_H)
$(OBJ)\restore.o:	$(HACK_H)   $(INCL)\lev.h	 $(INCL)\wseg.h
$(OBJ)\rip.o:		$(HACK_H)
$(OBJ)\rnd.o:		$(HACK_H)
$(OBJ)\rumors.o:	$(HACK_H)
$(OBJ)\save.o:		$(HACK_H)   $(INCL)\lev.h	 $(INCL)\wseg.h
$(OBJ)\search.o:	$(HACK_H)   $(INCL)\artifact.h
$(OBJ)\shk.o:		$(HACK_H)   $(INCL)\eshk.h
$(OBJ)\shknam.o:	$(HACK_H)   $(INCL)\eshk.h
$(OBJ)\sit.o:		$(HACK_H)
$(OBJ)\sounds.o:	$(HACK_H)   $(INCL)\edog.h	 $(INCL)\eshk.h
$(OBJ)\sp_lev.o:	$(HACK_H)   $(INCL)\sp_lev.h
$(OBJ)\spell.o: 	$(HACK_H)
$(OBJ)\steal.o: 	$(HACK_H)
$(OBJ)\termcap.o:	$(HACK_H)
$(OBJ)\timeout.o:	$(HACK_H)
$(OBJ)\topl.o:		$(HACK_H)
$(OBJ)\topten.o:	$(HACK_H)
$(OBJ)\track.o: 	$(HACK_H)
$(OBJ)\trampoli.o:	$(HACK_H)
$(OBJ)\trap.o:		$(HACK_H)   $(INCL)\edog.h
$(OBJ)\u_init.o:	$(HACK_H)
$(OBJ)\uhitm.o: 	$(HACK_H)   $(INCL)\artifact.h
$(OBJ)\vault.o: 	$(HACK_H)   $(INCL)\vault.h
$(OBJ)\version.o:	$(HACK_H)   $(INCL)\date.h
$(OBJ)\weapon.o:	$(HACK_H)
$(OBJ)\were.o:		$(HACK_H)
$(OBJ)\wield.o: 	$(HACK_H)
$(OBJ)\wizard.o:	$(HACK_H)
$(OBJ)\worm.o:		$(HACK_H)   $(INCL)\wseg.h
$(OBJ)\worn.o:		$(HACK_H)
$(OBJ)\write.o: 	$(HACK_H)
$(OBJ)\zap.o:		$(HACK_H)
