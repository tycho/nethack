#	SCCS Id: @(#)Makefile.os2	3.0	90/01/20
#	OS/2 NetHack 3.0 Makefile for Microsoft(tm) C 5.1 -- Timo Hakulinen
#
#	NDMAKE ver 4.5 is required, MS-MAKE will not work. MS-NMAKE
#	may work but requires probably modifications to some targets.
#
#	Copy pctty.c, pcunix.c, pcmain.c, msdos.c and this file
#	(+ termcap sources if used) into $(SRC) directory, rename
#	this file to "makefile" (important, some targets rely on it),
#	compile and link in real mode inside $(SRC).
#
#	When using CodeView versions earlier than ver. 2.3, define
#	OS2_CODEVIEW in pcconf.h and set HACKDIR (+ TERM and TERMCAP
#	if used) in OS/2 config.sys. Otherwise path searches may fail.
#
#	Note that $(GAMEDIR) must exist prior to compilation.
#
# Large memory model
CC	= cl
LINK	= link
MODEL	= L

# $(MAKE) macro is often predefined, so we use $(MAKEBIN) instead.
MAKEBIN	= make

# For those of us who have these on PC.
#YACC	= yacc
#LEX	= lex
YACC	= bison -y
LEX	= flex
# Standard file names may vary in PC installations.
YTABC	= y_tab.c
YTABH	= y_tab.h
LEXYYC	= lexyy.c

# Directories (makedefs hardcodes these, don't change them).
INCL	= ..\include
AUX	= ..\auxil
SRC	= ..\src
OBJ	= $(SRC)\o2

# The game name and description.
GAME	= nethack
GAMEDES = NetHack 3.0

# The game directory.
GAMEDIR = \games\$(GAME)

# Memory model, compile only, disable optimization, remove stack probes,
# 80286 instruction set, dedicated datasegment for items >= 5 bytes,
# pack structures on 1 byte boundaries, generate code for 8087
# coprocessor, compiler warning level, include file path.
CFLAGS	= /A$(MODEL) /c /Od /Gs /G2 /Gt5 /Zp1 /FPi87 /W1 /I$(INCL) $(CDFLAGS)

# + prepare for CodeView symbolic debugger.
CDFLAGS =
#CDFLAGS = /Zi

# Don't ignore case in symbols, no default lib search, stack 4096 bytes.
# (actually a bit of overkill), allow max 1024 segments in program.
LFLAGS	= /noig /nod /stack:4096 /seg:1024 $(LDFLAGS)

# + prepare for CodeView symbolic debugger.
LDFLAGS =
#LDFLAGS = /CO

# Real mode C libraries for 8087 coprocessor (change if necessary).
RLIBS	= $(MODEL)libc7r

# Protected mode C libraries for 8087 (change if necessary),
# OS/2 API entry points.
PLIBS	= $(MODEL)libc7p doscalls

# Module definition file for OS/2.
OS2DEFS	= $(GAME).def

# Target system.
TARG	= pc

# The default make target (so just typing 'make' is useful).
default: $(GAME)

# If you have yacc and lex programs and make any changes, comment out the
# upper two lines and uncomment the lower two.
do_yacc: yacc_msg
do_lex:  lex_msg
#do_yacc: yacc_act
#do_lex:  lex_act

# Optional high-quality BSD random number generation routines (see pcconf.h).
# Set to nothing if not used.
RANDOM	= $(OBJ)\random.o
#RANDOM	=

# Termcap routines.
TERMCAPS = termlib.lib

# If TERMLIB defined in pcconf.h, comment out the upper line and
# uncomment the lower.
TERMLIB =
#TERMLIB = $(TERMCAPS)

######################################################################
#
# Nothing below this line should have to be changed.
#
# Other things that have to be reconfigured are in config.h,
# {unixconf.h, pcconf.h, tosconf.h}, and possibly system.h.
#

# The game filename.
GAMEFILE = $(GAMEDIR)\$(GAME).exe

# For NDMAKE, to handle the .o suffix.
.SUFFIXES: .exe .o .c .y .l

.c.o:
	$(CC) $(CFLAGS) /Fo$(OBJ)\$*.o $*.c

# Termcap objects.
TERMOBJS = $(OBJ)\tgetent.o $(OBJ)\tgetflag.o $(OBJ)\tgetnum.o \
	   $(OBJ)\tgetstr.o $(OBJ)\tgoto.o $(OBJ)\tputs.o $(OBJ)\isdigit.o \
	   $(OBJ)\fgetlr.o

# Object files for makedefs.
MAKEOBJS = $(OBJ)\makedefs.o $(OBJ)\alloc.o $(OBJ)\monst.o $(OBJ)\objects.o \
	   $(OBJ)\panic.o

# Object files for special levels compiler.
SPLEVOBJS = $(OBJ)\lev_comp.o $(OBJ)\lev_lex.o $(OBJ)\lev_main.o \
	    $(OBJ)\alloc.o $(OBJ)\monst.o $(OBJ)\objects.o $(OBJ)\panic.o

VOBJ =	$(OBJ)\allmain.o $(OBJ)\alloc.o    $(OBJ)\apply.o    $(OBJ)\artifact.o \
	$(OBJ)\attrib.o  $(OBJ)\bones.o    $(OBJ)\cmd.o      $(OBJ)\dbridge.o \
	$(OBJ)\decl.o    $(OBJ)\demon.o    $(OBJ)\do.o       $(OBJ)\do_name.o \
	$(OBJ)\do_wear.o $(OBJ)\dog.o      $(OBJ)\dogmove.o  $(OBJ)\dokick.o \
	$(OBJ)\dothrow.o $(OBJ)\eat.o      $(OBJ)\end.o      $(OBJ)\engrave.o \
	$(OBJ)\exper.o   $(OBJ)\extralev.o $(OBJ)\fountain.o $(OBJ)\getline.o \
	$(OBJ)\hack.o    $(OBJ)\invent.o   $(OBJ)\lock.o     $(OBJ)\mail.o \
	$(OBJ)\main.o    $(OBJ)\makemon.o  $(OBJ)\mcastu.o   $(OBJ)\mhitm.o \
	$(OBJ)\mhitu.o   $(OBJ)\mklev.o    $(OBJ)\mkmaze.o   $(OBJ)\mkobj.o \
	$(OBJ)\mkroom.o  $(OBJ)\mon.o      $(OBJ)\mondata.o  $(OBJ)\msdos.o \
	$(OBJ)\monmove.o $(OBJ)\monst.o    $(OBJ)\mthrowu.o  $(OBJ)\music.o \
 	$(OBJ)\o_init.o  $(OBJ)\objects.o  $(OBJ)\objnam.o   $(OBJ)\options.o \
	$(OBJ)\pager.o   $(OBJ)\pickup.o   $(OBJ)\polyself.o $(OBJ)\potion.o \
	$(OBJ)\pray.o    $(OBJ)\pri.o      $(OBJ)\priest.o   $(OBJ)\prisym.o \
	$(RANDOM)        $(OBJ)\read.o     $(OBJ)\restore.o  $(OBJ)\rip.o \
	$(OBJ)\rnd.o     $(OBJ)\rumors.o   $(OBJ)\save.o     $(OBJ)\search.o \
	$(OBJ)\shk.o     $(OBJ)\shknam.o   $(OBJ)\sit.o      $(OBJ)\sounds.o \
	$(OBJ)\sp_lev.o  $(OBJ)\spell.o    $(OBJ)\steal.o    $(OBJ)\termcap.o \
	$(OBJ)\timeout.o $(OBJ)\topl.o     $(OBJ)\topten.o   $(OBJ)\track.o \
	$(OBJ)\trap.o    $(OBJ)\tty.o      $(OBJ)\u_init.o   $(OBJ)\uhitm.o \
	$(OBJ)\unix.o    $(OBJ)\vault.o    $(OBJ)\weapon.o   $(OBJ)\were.o \
	$(OBJ)\wield.o   $(OBJ)\wizard.o   $(OBJ)\worm.o     $(OBJ)\worn.o \
	$(OBJ)\write.o   $(OBJ)\zap.o
HOBJ =	$(VOBJ) $(OBJ)\version.o

PCCONF_H   = $(INCL)\$(TARG)conf.h $(INCL)\msdos.h $(INCL)\system.h \
	     $(INCL)\extern.h $(INCL)\def_os2.h 
GLOBAL_H   = $(INCL)\global.h $(INCL)\coord.h $(PCCONF_H)
CONFIG_H   = $(INCL)\config.h $(INCL)\tradstdc.h $(GLOBAL_H)
TRAP_H	   = $(INCL)\trap.h
PERMONST_H = $(INCL)\permonst.h $(INCL)\monflag.h
YOU_H	   = $(INCL)\you.h $(INCL)\attrib.h $(PERMONST_H) $(INCL)\mondata.h \
	     $(INCL)\monst.h $(INCL)\youprop.h
DECL_H	   = $(INCL)\decl.h $(INCL)\spell.h $(INCL)\obj.h $(YOU_H) \
	     $(INCL)\onames.h $(INCL)\pm.h
HACK_H	   = $(CONFIG_H) $(DECL_H) $(INCL)\monsym.h $(INCL)\mkroom.h \
	     $(INCL)\objclass.h $(INCL)\gold.h $(INCL)\trap.h $(INCL)\flag.h \
	     $(INCL)\rm.h

# The main target
$(GAMEDIR)\$(GAME).exe: $(OBJ) $(HOBJ) $(OS2DEFS) $(TERMLIB)
	$(LINK) $(HOBJ),$(GAMEDIR)\$(GAME),$(GAME),$(PLIBS) $(TERMLIB),$(OS2DEFS) $(LFLAGS) ;

# NDMAKE automatically generates LINK and LIB response files.

$(GAME): $(GAMEDIR)\$(GAME).exe
$(GAME).exe: $(GAMEDIR)\$(GAME).exe

all:	$(OBJ) makedefs lev_comp $(GAME) auxil
	@echo Done.

$(OBJ):
	mkdir $(OBJ)

# Target for termcap routines.

$(TERMCAPS): $(TERMOBJS)
	lib $(TERMCAPS) -+ $(TERMOBJS) ;

# Targets for makedefs.

makedefs: makedefs.exe
makedefs.exe: $(MAKEOBJS)
	$(LINK) $(MAKEOBJS),,,$(RLIBS) $(LFLAGS) ;

$(OBJ)\makedefs.o: $(INCL)\config.h $(INCL)\permonst.h $(INCL)\objclass.h

# Targets for the special levels compiler.

lev_comp: lev_comp.exe
lev_comp.exe: $(SPLEVOBJS)
	$(LINK) $(SPLEVOBJS),,,$(RLIBS) $(LFLAGS) ;

$(OBJ)\lev_comp.o: $(HACK_H) $(INCL)\sp_lev.h lev_comp.c
	$(CC) $(CFLAGS) /Fo$(OBJ)\$*.o $*.c
$(OBJ)\lev_lex.o:  $(HACK_H) $(INCL)\sp_lev.h $(INCL)\lev_comp.h lev_lex.c
	$(CC) $(CFLAGS) /Fo$(OBJ)\$*.o $*.c
$(OBJ)\lev_main.o: $(HACK_H) $(INCL)\sp_lev.h

lev_comp.c: lev_comp.y
	$(MAKEBIN) do_yacc

lev_lex.c:  lev_comp.l
	$(MAKEBIN) do_lex

yacc_msg:
	@echo lev_comp.y has changed. To update lev_comp.c and lev_comp.h run YACC.

yacc_act:
	$(YACC) -d lev_comp.y
	copy $(YTABC) lev_comp.c
	copy $(YTABH) $(INCL)\lev_comp.h
	del $(YTABC)
	del $(YTABH)

lex_msg:
	@echo lev_comp.l has changed. To update lev_lex.c run LEX.

lex_act:
	$(LEX) lev_comp.l
	copy $(LEXYYC) lev_lex.c
	del $(LEXYYC)

#
#	The following include files depend on makedefs to be created.
#
#	date.h should be remade any time any of the source or include code
#	is modified.
#
$(INCL)\date.h: $(VOBJ) makedefs.exe
	.\makedefs -v

$(INCL)\trap.h:	makedefs.exe
	.\makedefs -t

$(INCL)\onames.h: makedefs.exe
	.\makedefs -o

$(INCL)\pm.h: makedefs.exe
	.\makedefs -p

data:	$(AUX)\data.base makedefs.exe
	.\makedefs -d

rumors: $(AUX)\rumors.tru $(AUX)\rumors.fal makedefs.exe
	.\makedefs -r

#
#	The following programs vary depending on what OS you are using.
#
$(OBJ)\main.o: $(HACK_H) $(TARG)main.c
	$(CC) $(CFLAGS) /Fo$(OBJ)\main.o $(TARG)main.c

$(OBJ)\tty.o:  $(HACK_H) $(INCL)\func_tab.h $(TARG)tty.c
	$(CC) $(CFLAGS) /Fo$(OBJ)\tty.o $(TARG)tty.c

$(OBJ)\unix.o: $(HACK_H) $(TARG)unix.c
	$(CC) $(CFLAGS) /Fo$(OBJ)\unix.o $(TARG)unix.c

#
# Secondary targets
#

auxil:	spec_levs data rumors
	xcopy $(AUX)\*. $(GAMEDIR)

spec_levs: $(AUX)\castle.des $(AUX)\endgame.des $(AUX)\tower.des
	lev_comp $(AUX)\castle.des
	lev_comp $(AUX)\endgame.des
	lev_comp $(AUX)\tower.des
	xcopy castle $(GAMEDIR)
	del castle
	xcopy endgame $(GAMEDIR)
	del endgame
	xcopy tower? $(GAMEDIR)
	del tower?

$(OS2DEFS):
	echo NAME $(GAME) WINDOWCOMPAT> $(OS2DEFS)
	echo DESCRIPTION '$(GAMEDES)'>> $(OS2DEFS)
	echo PROTMODE>> $(OS2DEFS)
	echo EXETYPE OS2>> $(OS2DEFS)

clean:
	del $(OBJ)\*.o
	rmdir $(OBJ)

spotless: clean
	del $(INCL)\date.h
	del $(INCL)\onames.h
	del $(INCL)\pm.h
	del makedefs.exe
	del lev_comp.exe
	del $(TERMCAPS)
	del *.def
	del *.map
	del $(AUX)\data
	del $(AUX)\rumors
	del castle
	del endgame
	del tower?

#
# Other dependencies
#

# GO AHEAD, DELETE THIS LINE

$(OBJ)\allmain.o:  $(HACK_H)
$(OBJ)\alloc.o:    $(CONFIG_H)
$(OBJ)\apply.o:    $(HACK_H) $(INCL)\edog.h
$(OBJ)\artifact.o: $(HACK_H) $(INCL)\artifact.h
$(OBJ)\attrib.o:   $(HACK_H)
$(OBJ)\bones.o:    $(HACK_H)
$(OBJ)\cmd.o:      $(HACK_H) $(INCL)\func_tab.h
$(OBJ)\dbridge.o:  $(HACK_H)
$(OBJ)\decl.o:     $(HACK_H)
$(OBJ)\demon.o:    $(HACK_H)
$(OBJ)\do.o:       $(HACK_H)
$(OBJ)\do_name.o:  $(HACK_H)
$(OBJ)\do_wear.o:  $(HACK_H)
$(OBJ)\dog.o:      $(HACK_H) $(INCL)\edog.h
$(OBJ)\dogmove.o:  $(HACK_H) $(INCL)\mfndpos.h $(INCL)\edog.h
$(OBJ)\dokick.o:   $(HACK_H)
$(OBJ)\dothrow.o:  $(HACK_H)
$(OBJ)\eat.o:      $(HACK_H)
$(OBJ)\end.o:      $(HACK_H) $(INCL)\eshk.h
$(OBJ)\engrave.o:  $(HACK_H)
$(OBJ)\exper.o:    $(HACK_H)
$(OBJ)\extralev.o: $(HACK_H)
$(OBJ)\fountain.o: $(HACK_H)
$(OBJ)\getline.o:  $(HACK_H) $(INCL)\func_tab.h
$(OBJ)\hack.o:     $(HACK_H)
$(OBJ)\invent.o:   $(HACK_H) $(INCL)\lev.h $(INCL)\wseg.h
$(OBJ)\ioctl.o:    $(HACK_H)
$(OBJ)\lev_comp.o: $(HACK_H) $(INCL)\sp_lev.h
$(OBJ)\lock.o:     $(HACK_H)
$(OBJ)\makemon.o:  $(HACK_H)
$(OBJ)\mail.o:     $(HACK_H)
$(OBJ)\mcastu.o:   $(HACK_H)
$(OBJ)\mhitm.o:    $(HACK_H) $(INCL)\artifact.h
$(OBJ)\mhitu.o:    $(HACK_H) $(INCL)\artifact.h $(INCL)\edog.h
$(OBJ)\mklev.o:    $(HACK_H)
$(OBJ)\mkmaze.o:   $(HACK_H)
$(OBJ)\mkobj.o:    $(HACK_H)
$(OBJ)\mkroom.o:   $(HACK_H)
$(OBJ)\mon.o:      $(HACK_H) $(INCL)\mfndpos.h $(INCL)\artifact.h
$(OBJ)\mondata.o:  $(HACK_H) $(INCL)\eshk.h $(INCL)\epri.h
$(OBJ)\monmove.o:  $(HACK_H) $(INCL)\mfndpos.h $(INCL)\artifact.h
$(OBJ)\monst.o:    $(CONFIG_H) $(PERMONST_H) $(INCL)\eshk.h $(INCL)\vault.h \
		   $(INCL)\epri.h
$(OBJ)\msdos.o:    $(HACK_H)
$(OBJ)\mthrowu.o:  $(HACK_H)
$(OBJ)\music.o:    $(HACK_H)
$(OBJ)\o_init.o:   $(HACK_H) $(INCL)\onames.h
$(OBJ)\objects.o:  $(CONFIG_H) $(INCL)\obj.h $(INCL)\objclass.h $(INCL)\prop.h
$(OBJ)\objnam.o:   $(HACK_H)
$(OBJ)\options.o:  $(HACK_H)
$(OBJ)\pager.o:    $(HACK_H)
$(OBJ)\panic.o:    $(CONFIG_H)
$(OBJ)\pickup.o:   $(HACK_H)
$(OBJ)\polyself.o: $(HACK_H)
$(OBJ)\potion.o:   $(HACK_H)
$(OBJ)\pray.o:     $(HACK_H)
$(OBJ)\pri.o:      $(HACK_H) $(INCL)\termcap.h
$(OBJ)\priest.o:   $(HACK_H) $(INCL)\mfndpos.h $(INCL)\eshk.h $(INCL)\epri.h
$(OBJ)\prisym.o:   $(HACK_H) $(INCL)\lev.h $(INCL)\wseg.h
$(OBJ)\random.o:
$(OBJ)\read.o:     $(HACK_H)
$(OBJ)\restore.o:  $(HACK_H) $(INCL)\lev.h $(INCL)\wseg.h
$(OBJ)\rip.o:      $(HACK_H)
$(OBJ)\rnd.o:      $(HACK_H)
$(OBJ)\rumors.o:   $(HACK_H)
$(OBJ)\save.o:     $(HACK_H) $(INCL)\lev.h $(INCL)\wseg.h
$(OBJ)\search.o:   $(HACK_H) $(INCL)\artifact.h
$(OBJ)\shk.o:      $(HACK_H) $(INCL)\eshk.h
$(OBJ)\shknam.o:   $(HACK_H) $(INCL)\eshk.h
$(OBJ)\sit.o:      $(HACK_H)
$(OBJ)\sounds.o:   $(HACK_H) $(INCL)\edog.h $(INCL)\eshk.h
$(OBJ)\sp_lev.o:   $(HACK_H) $(INCL)\sp_lev.h
$(OBJ)\spell.o:    $(HACK_H)
$(OBJ)\steal.o:    $(HACK_H)
$(OBJ)\termcap.o:  $(HACK_H) $(INCL)\termcap.h
$(OBJ)\timeout.o:  $(HACK_H)
$(OBJ)\topl.o:     $(HACK_H)
$(OBJ)\topten.o:   $(HACK_H)
$(OBJ)\track.o:    $(HACK_H)
$(OBJ)\trap.o:     $(HACK_H) $(INCL)\edog.h
$(OBJ)\u_init.o:   $(HACK_H)
$(OBJ)\uhitm.o:    $(HACK_H) $(INCL)\artifact.h
$(OBJ)\vault.o:    $(HACK_H) $(INCL)\vault.h
$(OBJ)\version.o:  $(HACK_H) $(INCL)\date.h
$(OBJ)\weapon.o:   $(HACK_H)
$(OBJ)\were.o:     $(HACK_H)
$(OBJ)\wield.o:    $(HACK_H)
$(OBJ)\wizard.o:   $(HACK_H)
$(OBJ)\worm.o:     $(HACK_H) $(INCL)\wseg.h
$(OBJ)\worn.o:     $(HACK_H)
$(OBJ)\write.o:    $(HACK_H)
$(OBJ)\zap.o:      $(HACK_H)
